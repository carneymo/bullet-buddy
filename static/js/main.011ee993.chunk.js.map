{"version":3,"sources":["components/RawBulletTextArea.js","components/bullets.js","components/AcronymViewer.js","components/abbreviations.js","App.js","serviceWorker.js","index.js"],"names":["React","Component","Word","props","handlePopoverOpen","setState","open","handlePopoverClose","handleHover","isNotEditable","word","match","length","index","getAbbreviations","abbreviationData","abbreviation","find","row","abbr","toLowerCase","value","getSynonyms","Axios","get","then","res","status","data","all","map","item","synonyms","catch","err","console","log","JSON","stringify","state","isEditable","bind","this","prevProps","c","abbrvData","className","key","onMouseEnter","onMouseLeave","onClick","changeWord","parentIndex","synList","syn","toString","Bullet","tokenize","text","output","split","forEach","seg","innerSeg","push","s","tweak","sentence","replace","newWord","i","newBullet","updateBulletText","join","indexOfColon","indexOfDashes","BulletEditor","extractBullets","bullets","shift","bullet","trim","newText","charAt","toUpperCase","slice","updateInputText","onChange","e","nativeEvent","target","childNodes","Array","from","node","innerText","ref","createRef","inputBullets","style","width","BulletOutputViewerBullet","xToPx","x","div","document","createElement","display","height","body","appendChild","px","parseFloat","window","getComputedStyle","parentNode","removeChild","evaluateBullet","current","idealWidth","oldPWidth","getBoundingClientRect","getNormalBullet","getSmallestBullet","getLargestBullet","idealHeight","optimized","bulletText","processing","processed","prevState","snapshot","currentBulletText","newBulletText","optimizeBullet","handleBulletChange","Promise","resolve","setStateAsync","prevEval","prevBullet","grow","widthDiff","spaceIndexes","terminate","useIndex","action","len","optim","pop","val","splice","Math","floor","space","substring","currentEval","BulletOutputViewer","handleSelectionCopy","preventDefault","getSelection","clipboardData","setData","handleCopyButtonClick","range","createRange","selectNode","removeAllRanges","addRange","execCommand","bulletsText","onCopy","Button","variant","color","size","startIcon","AcronymViewer","extractAcroyms","acs","sort","alreadyAdded","indexOf","acronyms","tableSettings","columns","type","stretchH","autoWrapRow","maxRows","Infinity","manualRowResize","manualColumnResize","rowHeaders","colHeaders","trimWhitespace","enterBeginsEditing","manualRowMove","manualColumnMove","columnSorting","indicator","autoColumnSize","minRows","minSpareRows","contextMenu","licenseKey","search","queryMethod","queryStr","callback","instance","col","result","DEFAULT_CALLBACK","testResult","getCellMeta","isSearchResult","apply","arguments","AbbreviationTable","handleChange","onAbbrevitionDataChange","settings","afterChange","App","saveSettings","localStorage","setItem","error","getSettings","getItem","parse","onAbbreviationTableChange","setAbbreviationTable","abreviationData","newTable","filter","abbreviationTable","handleTextAreaUpdate","inputTextRef","scrollHeight","bulletInputText","handleSelect","bulletTypeChange","newValue","tabValue","bulletType","toggleDrawer","event","v","drawerOpen","thesauresViewer","visible","posX","posY","wordList","el","querySelector","remove","widthSettings","AWD","EPR","OPR","widthSetting","id","AppBar","position","Toolbar","Typography","Tabs","Tab","label","Container","maxWidth","Grid","container","justify","xs","md","lg","xl","spacing","align","rows","resize","minHeight","component","Drawer","anchor","onClose","class","href","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.011ee993.chunk.js","sourcesContent":["import React from 'react';\r\nclass InputBulletTextArea extends React.Component {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n      };\r\n    }\r\n  \r\n    componentDidMount() {\r\n      \r\n    }\r\n  \r\n    textAreaUpdate = (evnt) =>{\r\n      this.setState({text: evnt.target.value});\r\n    }\r\n    render() {\r\n        const widthSettings = {\r\n            AWD:'202.321mm',\r\n            EPR:'202.321mm',\r\n            OPR :'201.041mm',\r\n        }\r\n\r\n      return (\r\n        <textarea \r\n          rows={5} \r\n          value={this.state.text} \r\n          onChange={this.textAreaUpdate}\r\n          className=\"bullet-text\"\r\n          style={{\r\n              width: widthSettings[this.props.bulletType],\r\n              resize:\"none\",\r\n            }}\r\n          />\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default InputBulletTextArea;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Axios from 'axios';\r\n\r\n\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nclass Word extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      open: false,\r\n      synonyms: null,\r\n      isEditable: null,\r\n    };\r\n\r\n    this.handlePopoverClose = this.handlePopoverClose.bind(this);\r\n    this.handlePopoverOpen = this.handlePopoverOpen.bind(this);\r\n  }\r\n\r\n  handlePopoverOpen = () => {\r\n    this.setState({ open: true })\r\n  };\r\n\r\n  handlePopoverClose = () => {\r\n    this.setState({ open: false })\r\n  }\r\n\r\n  handleHover = () =>{\r\n\r\n    // Change CSS\r\n\r\n    // Load synonyms and populate lists\r\n\r\n  }\r\n\r\n  isNotEditable = word => {\r\n    return word.match(/([A-Z]{2,})/) != null\r\n      | word.match(/([0-9])/) != null\r\n      | word.length <= 2\r\n      | (this.props.index < 1);\r\n  }\r\n\r\n  getAbbreviations = word => {\r\n    if(this.props.abbreviationData === null){return null}\r\n    // extract dictionary\r\n    const abbreviation = this.props.abbreviationData.find((row) => row.abbr === word.toLowerCase() | row.value.toLowerCase() === word.toLowerCase());\r\n\r\n    return typeof abbreviation === \"undefined\" ? null : abbreviation;\r\n  }\r\n\r\n  getSynonyms = (word) => {\r\n\r\n    ////console.log(\"Attempting to get synonyms for: \" + word)\r\n    Axios.get(\"https://api.datamuse.com/words?max=15&ml=\" + word)\r\n      .then(res => {\r\n        if (res.status === 200) {\r\n          const data = res.data;\r\n          if (data.length !== 0) {\r\n\r\n            const all = data.map((item) => {\r\n              return item.word\r\n            });\r\n            ////console.log(all)\r\n            this.setState({ synonyms: all })\r\n          }\r\n        } else {\r\n          //console.log(`Failed to fetch synonyms: ${res}`);\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(`ERR: ${JSON.stringify(err)}`);\r\n      });\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    if (this.isNotEditable(this.props.value)) {\r\n      this.setState({ isEditable: false })\r\n    } else {\r\n      this.getSynonyms(this.props.value);\r\n      this.setState({ isEditable: true })\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.value !== prevProps.value && this.state.isEditable) {\r\n      this.getSynonyms(this.props.value);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let word = this.props.value;\r\n\r\n    let c = \"bullet-editor-word-editable\";\r\n\r\n    // Check if abbreviable\r\n    const abbrvData = this.getAbbreviations(word);\r\n\r\n    if (abbrvData !== null) {\r\n\r\n      if (abbrvData.value.toLowerCase() === word.toLowerCase()) { // Abbreviable word\r\n\r\n        c = c + \" abbreviable popup\"\r\n\r\n        return (\r\n          <span\r\n            className={c}\r\n            key={\"popup\" + this.props.key}\r\n            onMouseEnter={this.handlePopoverOpen}\r\n            onMouseLeave={this.handlePopoverClose}\r\n          >\r\n            {word}\r\n            <span className={this.state.open ? \"popuptext show\" : \"popuptext\"} >\r\n              <ul className=\"popuptextlist\">\r\n                <li\r\n                  className=\"synonym-button\"\r\n                  onClick={() => this.props.changeWord(abbrvData.abbr, this.props.parentIndex)}\r\n                >{abbrvData.abbr}\r\n                </li>\r\n              </ul>\r\n            </span>\r\n          </span>\r\n        );\r\n      }\r\n\r\n      if (abbrvData.abbr === word) {\r\n        // Already abbreviated word\r\n        c = c + \" approved-abbreviation popup\"\r\n        return (\r\n          <span\r\n            className={c}\r\n            onMouseEnter={this.handlePopoverOpen}\r\n            onMouseLeave={this.handlePopoverClose}\r\n\r\n          >\r\n            {word}\r\n            <span className={this.state.open ? \"popuptext show\" : \"popuptext\"} >\r\n              <ul className=\"popuptextlist\">\r\n                <li\r\n                  className=\"synonym-button\"\r\n                  onClick={() => this.props.changeWord(abbrvData.value.toLowerCase(), this.props.parentIndex)}\r\n                >{abbrvData.value}\r\n                </li>\r\n              </ul>\r\n            </span>\r\n          </span>\r\n        );\r\n      }\r\n    }\r\n\r\n    if (this.isNotEditable(word)) {\r\n      c = \"bullet-editor-word popup\";\r\n      return (<span key={\"word\" + this.props.key} className={c}>{word}</span>);\r\n    }\r\n\r\n    c = c + \" popup\";\r\n\r\n    let synList = null;\r\n    if (this.state.synonyms !== null) {\r\n      synList = this.state.synonyms.map(syn =>\r\n        <li\r\n          className=\"synonym-button\"\r\n          key = {syn + this.props.parentIndex.toString()}\r\n          onClick={() => this.props.changeWord(syn, this.props.parentIndex)}\r\n        >{syn}</li>\r\n      )\r\n    }\r\n\r\n    return (\r\n\r\n      <span\r\n        className={c}\r\n        key={\"word\"+this.props.key}\r\n        onMouseEnter={this.handlePopoverOpen}\r\n        onMouseLeave={this.handlePopoverClose}\r\n\r\n      >\r\n        {word}\r\n        <span key={\"popup\"+ this.props.key} className={this.state.open ? \"popuptext show\" : \"popuptext\"} >\r\n          <ul className=\"popuptextlist\">{synList}</ul>\r\n        </span>\r\n      </span>\r\n    );\r\n\r\n  }\r\n}\r\n\r\nclass Bullet extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      indexOfColon: null,\r\n      indexOfDashes: null,\r\n    };\r\n    this.changeWord = this.changeWord.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    //this.setState({ bullet: this.updateBullet(this.props.text) })\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    // if (this.props.text !== prevProps.text) {\r\n    //   this.setState({ bullet: this.updateBullet(this.props.text) })\r\n    // }\r\n  }\r\n\r\n  tokenize = (text) => {\r\n    let output = [];\r\n\r\n\r\n    // if (text.match(';') !== null && text.match(/-{2}/) !== null) {\r\n    //   // First extract A;I--R\r\n    //   let [action, impact, result] = text.split(/;|-{2}/);\r\n    //   ////console.log(`action: ${action} impact: ${impact} result: ${result}`)\r\n\r\n    //   // Then split each up by spaces\r\n    //   action = action.split(/[\\s]/);\r\n    //   impact = impact.split(/[\\s]/);\r\n    //   result = result.split(/[\\s]/);\r\n\r\n    //   // Recombine w/ spaces in right spots.\r\n    //   output = [...action, \";\", ...impact, \"--\", ...result];\r\n    // } else {\r\n    //   // We have some strange input so split on any end punctuations\r\n    //   output = text.split(/\\s/);\r\n    // }\r\n\r\n    text.split(/\\s/).forEach((seg) => {\r\n      let innerSeg = seg.split(/([/;,-])/);\r\n      if (innerSeg.length === 1){\r\n        output.push(seg);\r\n        output.push(' ');\r\n      }else{\r\n        innerSeg.forEach((s) => {\r\n          if(s !== '') output.push(s);\r\n        })\r\n        output.push(' ');\r\n      }\r\n    })\r\n    return output;\r\n  }\r\n\r\n  tweak = (sentence) => {\r\n    // adds a 0-width space (\\u200B) after forward slashes to cause them to wrap\r\n    sentence = sentence.replace(/(\\w)\\//g, '$1/\\u200B');\r\n\r\n    // adds a non-breaking dash (\\u2011) instead of a dash to prevent wrapping\r\n    sentence = sentence.replace(/-/g, '\\u2011');\r\n    return sentence;\r\n  }\r\n\r\n  changeWord = (newWord, i) => {\r\n    let newBullet = this.tokenize(this.props.text);\r\n    newBullet[i] = newWord;\r\n    this.props.updateBulletText(newBullet.join(''), this.props.parentIndex);\r\n    //console.log(\"bullet change:\" + newBullet.join(' '))\r\n  }\r\n\r\n  render() {\r\n    const { text } = this.props;\r\n    let bullet = this.tokenize(text);\r\n    return (\r\n\r\n      bullet.map((word, i) => {\r\n        return (\r\n          <Word value={word} parentIndex={i} changeWord={this.changeWord} abbreviationData={this.props.abbreviationData} />\r\n        );\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\nclass BulletEditor extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      bullets: [],\r\n\r\n    };\r\n    this.ref = React.createRef();\r\n    this.updateBulletText = this.updateBulletText.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ bullets: this.extractBullets(this.props.inputBullets) })\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.inputBullets !== prevProps.inputBullets) {\r\n      this.setState({ bullets: this.extractBullets(this.props.inputBullets) })\r\n    }\r\n  }\r\n\r\n  extractBullets = text => {\r\n    let bullets = text.split(/-\\s/);\r\n    bullets.shift();\r\n    bullets = bullets.map((bullet) => {\r\n      return \"- \" + bullet.trim();\r\n    });\r\n    return bullets;\r\n  }\r\n\r\n  updateBulletText = (newText, i) => {\r\n    let bullets = this.state.bullets;\r\n    bullets[i] = newText;\r\n    bullets.join(' ');\r\n    bullets[i] = bullets[i].replace(/\\s;\\s/, \";\");\r\n    bullets[i] = bullets[i].replace(/\\s-{2}\\s/, \"--\");\r\n    bullets[i] = \"- \" + bullets[i].charAt(2).toUpperCase() + bullets[i].slice(3);\r\n    //console.log(\"bullet round 2: \" + bullets[i])\r\n    this.props.updateInputText(bullets.join('\\n'));\r\n  }\r\n\r\n  onChange = (e, i) => {\r\n\r\n    let c = e.nativeEvent.target.childNodes;\r\n    c = Array.from(c).map(node => {\r\n      return node.innerText;\r\n    })\r\n\r\n    this.updateBulletText(c.join(' '), i);\r\n  }\r\n\r\n  render() {\r\n    let index = 0;\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"bullet-editor\" style={{ width: this.props.width }}>\r\n          {\r\n            // Creat a bullet around each bullet\r\n            this.state.bullets.map((bullet, i) => {\r\n              index += 1;\r\n              return (\r\n                <span\r\n                  ref={this.ref}\r\n                  key = {\"span\" + index.toString()}\r\n                  className=\"bullet-editor-bullet\">\r\n                  <Bullet key={\"bullet\" + index.toString() + i.toString()} text={bullet} updateBulletText={this.updateBulletText} parentIndex={i} abbreviationData={this.props.abbreviationData} />\r\n                </span>\r\n              );\r\n            })\r\n          }\r\n        </div>\r\n        <div className=\"legend\">Legend:\r\n          <span className=\"approved-abbreviation\">Approved Abbreviation</span>\r\n          <span className=\"abbreviable\">Abbreviable Word</span>\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst smallSpace = \"\\u2006\"; // 1/6 em space [same as thinspace: \\u2009]\r\nconst midSpace = \"\\u2005\"; // 1/4 em space\r\nconst normalSpace = ' ';\r\nconst largeSpace = \"\\u2004\"; // 1/3 em space (thick space)\r\n\r\nclass BulletOutputViewerBullet extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.ref = React.createRef()\r\n    this.state = {\r\n      idealHeight: null,\r\n      idealWidth: null,\r\n      optimized: false,\r\n      bulletText: null,\r\n    };\r\n    this.processing = false;\r\n    this.processed = false;\r\n  }\r\n  componentDidMount() {\r\n    this.setState({ bulletText: this.props.bulletText })\r\n    //this.evaluateBullet()\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n    const { currentBulletText } = this.state;\r\n    const { width } = this.props;\r\n\r\n    let newBulletText = (prevState.bulletText !== currentBulletText && currentBulletText !== null);\r\n\r\n    // We have a props update, clear everything and start over\r\n    if (this.props.bulletText !== prevProps.bulletText || width !== prevProps.width) {\r\n      this.processing = false;\r\n      this.processed = false;\r\n      this.setState({ bulletText: this.props.bulletText, optimized: false })\r\n    } else if (newBulletText && !this.processing && !this.processed) {\r\n      this.optimizeBullet().then(() => {\r\n        this.props.handleBulletChange(this.state.bulletText, this.props.index);\r\n      });\r\n    }\r\n  }\r\n\r\n  xToPx = (x) => {\r\n    let div = document.createElement('div');\r\n    div.style.display = 'block';\r\n    div.style.height = x;\r\n    document.body.appendChild(div);\r\n    let px = parseFloat(window.getComputedStyle(div, null).height);\r\n    div.parentNode.removeChild(div);\r\n    return px;\r\n  }\r\n\r\n  evaluateBullet = () => {\r\n\r\n    if (this.ref === null) { return }\r\n\r\n    const node = this.ref.current;\r\n    const parentNode = node.parentNode;\r\n\r\n    let idealWidth = this.xToPx(this.props.width);\r\n\r\n    // // Undo wrapping so we get the single line height\r\n    // node.style.whiteSpace = 'nowrap';\r\n\r\n    // let idealHeight = node.getBoundingClientRect().height;\r\n    let oldPWidth = parentNode.style.width;\r\n    parentNode.style.width = \"800.00mm\";\r\n\r\n    const { width, height } = node.getBoundingClientRect();\r\n\r\n    // // Re-enable wrapping\r\n    // node.style.whiteSpace = 'pre-wrap';\r\n    // node.style.wordBreak = \"break-word\";\r\n    parentNode.style.width = oldPWidth;\r\n\r\n    let widthDiff = (width - idealWidth);\r\n\r\n    // if (height > idealHeight + 2) {\r\n    //   wrapped = true;\r\n    // }\r\n\r\n\r\n    ////console.log(`bullet width difference: ${widthDiff}`)\r\n    return { \"widthDiff\": widthDiff };\r\n  }\r\n\r\n  getNormalBullet = (text) => {\r\n    let output = text.split(/\\s/);\r\n    output.shift(); // remove hypen then add later\r\n    output = output.join(' ');\r\n    return \"- \" + output.trim();\r\n  }\r\n\r\n  getSmallestBullet = (text) => {\r\n    let output = text.split(/\\s/);\r\n    output.shift(); // remove hypen then add later\r\n    output = output.join(smallSpace);\r\n    return \"- \" + output.trim();\r\n  }\r\n\r\n  getLargestBullet = (text) => {\r\n    let output = text.split(/\\s/);\r\n    output.shift(); // remove hypen then add later\r\n    output = output.join(largeSpace);\r\n    return \"- \" + output.trim();\r\n  }\r\n\r\n  setStateAsync(state) {\r\n    return new Promise((resolve) => {\r\n      this.setState(state, resolve)\r\n    });\r\n  }\r\n\r\n  async optimizeBullet() {\r\n    let bullet = this.state.bulletText;\r\n    if (bullet === null) { return; }\r\n    this.processing = true;\r\n    console.log(\"building bullet: \" + bullet);\r\n    bullet = this.getNormalBullet(bullet);\r\n    await this.setStateAsync({ bulletText: bullet });\r\n    let prevEval = this.evaluateBullet();\r\n    let prevBullet = bullet;\r\n    let grow = true;\r\n\r\n    if(prevEval.widthDiff > -0.02 && prevEval.widthDiff < 0){\r\n      // We are withing 1mm already\r\n      console.log(\"Bullet Already Optimized\")\r\n      this.processed = true;\r\n      this.processing = false;\r\n      this.setState({bulletText: bullet, optimized: true });\r\n      return;\r\n    }\r\n\r\n    if(prevEval.widthDiff > 0){\r\n      // shrink bullet\r\n      console.log(\"Shrinking Bullet: \" +  bullet)\r\n      grow = false;\r\n    }else{\r\n      console.log(\"Shrinking Bullet: \" +  bullet)\r\n    }\r\n\r\n    let spaceIndexes = [];\r\n\r\n    // Find position of all space chars\r\n    Array.from(bullet).forEach((word, i) => {\r\n      if (word.match(/\\s/)) {\r\n        spaceIndexes.push(i);\r\n      }\r\n    });\r\n\r\n    spaceIndexes.shift(); // remove the first space since we dont want to add one after hypen\r\n\r\n    let terminate = false;\r\n    let useIndex = [];\r\n    let action = 0;\r\n    let len = spaceIndexes.length;\r\n    let optim = true;\r\n\r\n    // Shuffel up the space replacement\r\n    for (let i = 0; i < len; i++) {\r\n      switch (action) {\r\n        case 0: useIndex.push(spaceIndexes.shift());\r\n          break;// change space towards begining\r\n\r\n        case 1: useIndex.push(spaceIndexes.pop());\r\n          break;// Chjange space towards end\r\n\r\n        case 2:\r\n          let val = spaceIndexes.splice(Math.floor(spaceIndexes.length/2),1)\r\n          useIndex.push(val[0]);\r\n          break; // Change space in the middle\r\n\r\n        default:\r\n          break;\r\n      }\r\n      action += 1;\r\n      if (action === 3) { action = 0; }\r\n    }\r\n\r\n    while (!terminate) {\r\n      if (useIndex.length === 0) {\r\n        console.log(\"exhausted all index values\")\r\n        terminate = true;\r\n        optim = false;\r\n        continue;\r\n      }\r\n\r\n      const space = (grow) ? largeSpace : smallSpace;\r\n\r\n      // Replace the index with the appropriate space char\r\n      let i = useIndex.shift();\r\n      bullet = bullet.substring(0, i) + space + bullet.substring(i + 1);\r\n\r\n      // Re-evalute the size attributes\r\n      await this.setStateAsync({ bulletText: bullet });\r\n      let currentEval = this.evaluateBullet();\r\n\r\n      if(grow){\r\n        // IF we are still short of the line\r\n        if (currentEval.widthDiff < 0) {\r\n          // Still room to go.\r\n          prevEval = currentEval;\r\n          prevBullet = bullet;\r\n          continue;\r\n        }\r\n        // If we past the line\r\n        if (currentEval.widthDiff > 0) {\r\n          // Grew to big keep the old bullet\r\n          bullet = prevBullet;\r\n          terminate = true;\r\n          optim = true;\r\n        }\r\n      }else{\r\n\r\n        if (currentEval.widthDiff > 0) {\r\n          prevEval = currentEval;\r\n          prevBullet = bullet;\r\n          continue;\r\n        }\r\n\r\n        if (currentEval.widthDiff < 0) {\r\n          optim = true;\r\n          terminate = true;\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    // If we get here we should be optimized!\r\n    this.processed = true;\r\n    this.processing = false;\r\n    this.setState({ bulletText: bullet, optimized: optim });\r\n\r\n    return (bullet);\r\n  }\r\n\r\n  tweak = (sentence) => {\r\n    // adds a 0-width space (\\u200B) after forward slashes to cause them to wrap\r\n    sentence = sentence.replace(/(\\w)\\//g, '$1/\\u200B');\r\n\r\n    // adds a non-breaking dash (\\u2011) instead of a dash to prevent wrapping\r\n    sentence = sentence.replace(/-/g, '\\u2011');\r\n    return sentence;\r\n  }\r\n\r\n  render() {\r\n\r\n    const { optimized } = this.state;\r\n    let className = optimized ? \"bullet-output-bullet optimized\" : \"bullet-output-bullet notoptimized\";\r\n    return (\r\n\r\n      <div className={className} ref={this.ref}>\r\n        {this.state.bulletText}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass BulletOutputViewer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      bullets: [],\r\n    };\r\n    this.ref = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    //console.log(this.props.bulletsText)\r\n    this.setState({ bullets: this.extractBullets(this.props.bulletsText) })\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.props.bulletsText !== prevProps.bulletsText) {\r\n      this.setState({ bullets: this.extractBullets(this.props.bulletsText) })\r\n    }\r\n  }\r\n\r\n  extractBullets = text => {\r\n    let bullets = text.split(/-\\s/);\r\n    bullets.shift();\r\n    bullets = bullets.map((bullet) => {\r\n      return \"- \" + bullet.trim() + '\\r\\n';\r\n    });\r\n    return bullets;\r\n  }\r\n\r\n  handleSelectionCopy = e => {\r\n    e.preventDefault();\r\n    let text = window.getSelection().toString();\r\n    text = this.extractBullets(text);\r\n    text = text.join('');\r\n    text.replace(/\\n/g, '\\r\\n'); //need this for WINDOWS!\r\n    //console.log('Copy event: ' + text)\r\n    e.clipboardData.setData('text/plain', text);\r\n\r\n  }\r\n\r\n  handleCopyButtonClick = () => {\r\n    let range = document.createRange();\r\n    range.selectNode(this.ref.current);\r\n    window.getSelection().removeAllRanges(); // clear current selection\r\n    window.getSelection().addRange(range);\r\n    document.execCommand(\"copy\");\r\n    window.getSelection().removeAllRanges(); // clear current selection\r\n  }\r\n\r\n  handleBulletChange = (newText, i) => {\r\n    let bullets = this.state.bullets;\r\n    bullets[i] = newText;\r\n    this.setState({ bullets: bullets })\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"bullet-output-container\" style={{ width: this.props.width }}\r\n          onCopy={this.handleSelectionCopy}>\r\n          <p>XX. AMAZING BULLETS <mark>(Dont forget to copy to the right place!)</mark></p>\r\n          <div ref={this.ref}>\r\n            {\r\n\r\n              // Create a bullet around each bullet\r\n              this.state.bullets.map((bullet, i) => {\r\n\r\n                return (<BulletOutputViewerBullet\r\n                  width={this.props.width}\r\n                  bulletText={bullet}\r\n                  index={i}\r\n                  key={i.toString()}\r\n                  handleBulletChange={this.handleBulletChange}\r\n\r\n                />);\r\n              })\r\n            }\r\n          </div>\r\n\r\n        </div>\r\n        <Button\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          size=\"small\"\r\n          onClick={(e) => this.handleCopyButtonClick(e)}\r\n          startIcon={<FileCopyIcon />}\r\n        >\r\n          Copy Bullets to Clipboard\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { BulletOutputViewer, BulletEditor }\r\nexport default BulletEditor;","import React from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\n\r\nclass AcronymViewer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.ref = React.createRef();\r\n    }\r\n\r\n    handleCopyButtonClick = () => {\r\n        let range = document.createRange();\r\n        range.selectNode(this.ref.current);\r\n        window.getSelection().removeAllRanges(); // clear current selection\r\n        window.getSelection().addRange(range);\r\n        document.execCommand(\"copy\");\r\n        window.getSelection().removeAllRanges(); // clear current selection\r\n    }\r\n\r\n    extractAcroyms = () => {\r\n        const { text } = this.props;\r\n        if(text === null){\r\n            return \"no acronyms yet\";\r\n        }\r\n        let acs = text.match(/[A-Z]{2,}/g);\r\n        if(acs === null){\r\n            return \"no acronyms yet\";\r\n        }\r\n        acs = acs.sort();\r\n        let alreadyAdded = [];\r\n        acs = acs.map((acs)=>{\r\n            if(alreadyAdded.indexOf(acs) === -1){\r\n                alreadyAdded.push(acs)\r\n                return \" (\" + acs + \"); \";\r\n            }\r\n          return \"\";\r\n        })\r\n        return acs;\r\n      }\r\n      \r\n    render() {\r\n        const acronyms = this.extractAcroyms();\r\n        return (\r\n            <div>\r\n                <div className=\"bullet-output-container\" style={{\r\n                    width: this.props.width\r\n                }}>\r\n                    <p>X. REMARKS <mark>(use this section to spell out acronyms from the front)</mark></p>\r\n                    <div className=\"bullet-output-bullet\" ref={this.ref}>\r\n                        {acronyms}\r\n                    </div>\r\n                </div>\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    onClick={(e) => this.handleCopyButtonClick(e)}\r\n                    startIcon={<FileCopyIcon />}\r\n                >\r\n                    Copy Acronym List to Clipboard\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AcronymViewer;","import React from 'react';\r\nimport { HotTable } from '@handsontable/react';\r\n\r\nconst tableSettings = {\r\n    columns: [{\r\n        data: 'value',\r\n        type: 'text'\r\n        },{\r\n        data: 'abbr',\r\n        type: 'text'\r\n        },\r\n    ],\r\n    stretchH: 'all',\r\n    width: 500,\r\n    autoWrapRow: true,\r\n    height: 500,\r\n    maxRows: Infinity,\r\n    manualRowResize: true,\r\n    manualColumnResize: true,\r\n    rowHeaders: false,\r\n    colHeaders: [\r\n        'Word',\r\n        'Abbreviation',\r\n    ],\r\n    trimWhitespace: false,\r\n    enterBeginsEditing:false,\r\n    manualRowMove: true,\r\n    manualColumnMove: true,\r\n    columnSorting: {\r\n        indicator: true\r\n    },\r\n    autoColumnSize: false,\r\n    minRows: 2,\r\n    minSpareRows:1,\r\n    contextMenu: true,\r\n    licenseKey: 'non-commercial-and-evaluation',\r\n    search: {\r\n        queryMethod: function(queryStr,value){\r\n            return queryStr.toString() === value.toString();\r\n        },\r\n        callback: function(instance, row, col, value, result){\r\n            const DEFAULT_CALLBACK = function(instance, row, col, data, testResult) {\r\n                instance.getCellMeta(row, col).isSearchResult = testResult;\r\n            };\r\n  \r\n            DEFAULT_CALLBACK.apply(this, arguments);\r\n        },\r\n    },\r\n  };\r\n\r\nclass AbbreviationTable extends React.Component{\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        \r\n      };\r\n      \r\n    }\r\n  \r\n    handleChange = e => {\r\n          // Call parent to update state need to do value and abbr seperatly! They each come back as there own event.\r\n        \r\n          if(e === null){return;} \r\n          this.props.onAbbrevitionDataChange(e);\r\n          \r\n    }\r\n  \r\n    render(){\r\n    const {abbreviationData} = this.props;\r\n    return(\r\n          \r\n        <HotTable className={\"abbreviation-table\"} settings={tableSettings}  data={abbreviationData} afterChange={this.handleChange}/>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default AbbreviationTable;","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport {Tab, Tabs} from '@material-ui/core';\r\nimport './App.css';\r\nimport './components/RawBulletTextArea';\r\nimport {BulletEditor, BulletOutputViewer} from './components/bullets';\r\nimport AcronymViewer from './components/AcronymViewer';\r\nimport AbbreviationTable from './components/abbreviations'\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport ViewListIcon from '@material-ui/icons/ViewList';\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            bulletInputText: \"- Action section of bullet should go here; put the how/what you did in this part--bring it home w/ a great impact line\\n- This tool can optimize spacing; output will be red if the optimizer could not fix spacing with 2004 or 2006 Unicode spaces\",\r\n            abbreviationData: [\r\n                {value: \"organizations\", abbr: \"orgs\"},\r\n                {value: \"expandable\", abbr: \"expdble\"},\r\n            ],\r\n            abbreviationTable: [\r\n                {value: \"organizations\", abbr: \"orgs\"},\r\n                {value: \"expandable\", abbr: \"expdble\"},\r\n            ],\r\n            bulletType: \"OPR\",\r\n            tabValue: 0,\r\n            drawerOpen: false,\r\n            thesauresViewer: {\r\n                visible: false,\r\n                posX: 0,\r\n                posY: 0,\r\n                wordList: null,\r\n            }\r\n        };\r\n        this.inputTextRef = React.createRef();\r\n        this.handleTextAreaUpdate = this.handleTextAreaUpdate.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const el = document.querySelector(\".loader-container\");\r\n        if (el) {\r\n            el.remove();  // removing the spinner element\r\n            //this.setState({ loading: false }); // showing the app\r\n        }\r\n        let settings = this.getSettings();\r\n        if (settings !== null) {\r\n            this.setState({abbreviationData: settings.abbreviationData})\r\n            this.setAbbreviationTable(settings.abbreviationData);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n    }\r\n\r\n    saveSettings = (settings) => {\r\n        try {\r\n            window.localStorage.setItem('settings', JSON.stringify(settings));\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    getSettings = () => {\r\n        try {\r\n            if (window.localStorage.getItem('settings')) {\r\n                return JSON.parse(window.localStorage.getItem('settings'));\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n            return null;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    onAbbreviationTableChange = () => {\r\n\r\n        const {abbreviationData} = this.state;\r\n\r\n        this.setAbbreviationTable(abbreviationData);\r\n\r\n        console.log(abbreviationData);\r\n        let settings = {abbreviationData: abbreviationData}\r\n        this.saveSettings(settings)\r\n    }\r\n\r\n    setAbbreviationTable = (abreviationData) => {\r\n        let newTable = abreviationData.filter((row) => row.value !== null && row.abbr !== null);\r\n        newTable = newTable.map((row) => {\r\n            row.abbr = row.abbr.trim();\r\n            row.value = row.value.trim();\r\n            return row;\r\n        })\r\n        this.setState({abbreviationTable: newTable})\r\n    }\r\n\r\n    handleTextAreaUpdate = (text) => {\r\n        this.inputTextRef.current.style.height = this.inputTextRef.current.scrollHeight + \"px\"\r\n        this.setState({bulletInputText: text});\r\n    }\r\n\r\n    handleSelect = () => {\r\n        // let selection = window.getSelection();\r\n\r\n        // // Get position of text selection\r\n        // let offsetStart = this.inputTextRef.current.selectionStart;\r\n        // let offsetEnd = this.inputTextRef.current.selectionEnd;\r\n\r\n        // // Get potion of selection in viewport\r\n        // let x = e.nativeEvent.clientX;\r\n        // let y = e.nativeEvent.clientY;\r\n\r\n        // console.log(\"Start: \" + offsetStart + \"END: \" + offsetEnd + \" X: \" +x + \" Y: \" + y);\r\n        // console.log(\"word: \" + selection.toString())\r\n        // if(offsetStart === offsetEnd){\r\n        //   this.setState({thesauresViewer: {visibility: false, wordList:null}});\r\n\r\n        //   return;\r\n\r\n        // } // We dont have a full word selected\r\n\r\n        // // Extract word from selection\r\n        // let word = selection.toString();\r\n        // //TODO check for multple words and reject\r\n        // word.trim();\r\n    }\r\n\r\n    bulletTypeChange = (e, newValue) => {\r\n        let bulletTypes = [\"OPR\", \"EPR\", \"AWD\"];\r\n        this.setState({tabValue: newValue, bulletType: bulletTypes[newValue]});\r\n    }\r\n    toggleDrawer = (event, v) => {\r\n        if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n            return;\r\n        }\r\n        this.setState({drawerOpen: v})\r\n    }\r\n\r\n    render() {\r\n\r\n        const widthSettings = {\r\n            AWD: '202.321mm',\r\n            EPR: '202.321mm',\r\n            OPR: '201.050mm',\r\n        }\r\n\r\n        const widthSetting = widthSettings[this.state.bulletType];\r\n\r\n        // let synList = null;\r\n        // if (this.state.thesauresViewer.wordList !== null) {\r\n        //   synList = this.state.thesauresViewer.wordList.map(syn =>\r\n        //     <li className=\"synonym-button\" onClick={()=> this.handleSynonymSelect(syn)}>{syn}</li>\r\n        //   )\r\n        // }\r\n\r\n        return (\r\n            <div id=\"root\" className=\"root\">\r\n              <AppBar position=\"static\" className=\"app-bar\">\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" color=\"inherit\" className=\"title\">\r\n                            Bullet Buddy!\r\n                        </Typography>\r\n                        <Tabs\r\n                            className=\"\"\r\n                            value={this.state.tabValue}\r\n                            onChange={this.bulletTypeChange}\r\n                            // indicatorColor=\"primary\"\r\n                            // textColor=\"primary\"\r\n                        >\r\n                            <Tab label=\"OPR\"/>\r\n                            <Tab label=\"EPR\"/>\r\n                            <Tab label=\"AWD\"/>\r\n                        </Tabs>\r\n                        <Button size=\"small\" variant=\"outlined\" color=\"inherit\" startIcon={<ViewListIcon/>}\r\n                                onClick={(e) => this.toggleDrawer(e, true)}>Abbreviations</Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n              <Container className=\"content\" maxWidth=\"xl\">\r\n                    <Grid container justify=\"space-around\">\r\n                        <Grid item xs={12} md={12} lg={12} xl={6} spacing={1} align=\"center\">\r\n                            <Typography variant=\"h6\">\r\n                                Input Bullets Here\r\n                            </Typography>\r\n\r\n                            <textarea\r\n                                ref={this.inputTextRef}\r\n                                value={this.state.bulletInputText}\r\n                                rows={6}\r\n                                onChange={(e) => this.handleTextAreaUpdate(e.target.value)}\r\n                                className=\"bullet-input-text\"\r\n                                style={{\r\n                                    width: widthSettings[this.state.bulletType],\r\n                                    resize: \"none\",\r\n                                    minHeight: \"5em\",\r\n                                }}\r\n                            />\r\n                            <div>\r\n                                <Button\r\n                                    variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    size=\"small\"\r\n                                    startIcon={<DeleteIcon/>}\r\n                                    onClick={() => {\r\n                                        this.handleTextAreaUpdate(\"\")\r\n                                        this.inputTextRef.current.style.height = \"5em\"\r\n                                    }}\r\n                                >Clear Input\r\n                                </Button>\r\n                            </div>\r\n\r\n                            <Typography variant=\"h6\" component=\"h2\">\r\n                                Smart Bullet Editor\r\n                            </Typography>\r\n\r\n                            <BulletEditor\r\n                                inputBullets={this.state.bulletInputText}\r\n                                updateInputText={this.handleTextAreaUpdate}\r\n                                abbreviationData={this.state.abbreviationTable}\r\n                                width={widthSetting}\r\n                            />\r\n\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={12} lg={12} xl={6} spacing={1} align=\"center\">\r\n                            <Typography variant=\"h6\" component=\"h2\">\r\n                                Bullet Output\r\n                            </Typography>\r\n\r\n                            <BulletOutputViewer\r\n                                bulletsText={this.state.bulletInputText}\r\n                                width={widthSetting}\r\n                                updateInputText={this.handleTextAreaUpdate}\r\n                            />\r\n\r\n                            <AcronymViewer width={widthSetting}\r\n                                           text={this.state.bulletInputText}/>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Drawer className=\"drawer\" anchor=\"bottom\" open={this.state.drawerOpen}\r\n                            onClose={(e) => this.toggleDrawer(e, false)}>\r\n                        <div className=\"drawer-header\">\r\n                            <Typography variant=\"h6\">Current Abbreviations Table</Typography>\r\n                            <Typography variant=\"subtitle1\">Copy your organizations approved abbreviations into the\r\n                                table. (They will save in your browser for future use!)</Typography>\r\n                        </div>\r\n                        <AbbreviationTable abbreviationData={this.state.abbreviationData}\r\n                                           onAbbrevitionDataChange={this.onAbbreviationTableChange}/>\r\n                    </Drawer>\r\n\r\n                </Container>\r\n\r\n              <div class=\"bottom-text\">\r\n                    <p>This site utilizes <a href=\"https://material-ui.com/\"> Material-UI</a>, <a\r\n                        href=\"https://handsontable.com/\">HandsOnTable</a>, and the <a\r\n                        href=\"https://www.datamuse.com/api/\">DataMuse API</a> The inspiration for this tool came from\r\n                        the <a href=\"https://ea-pods-team.github.io/pdf-bullets/ \"> EA-Pods Team pdf-bullets project</a>\r\n                    </p>\r\n                    <p>Submit an <a href=\"https://github.com/AF-Tools/bullet-buddy/issues/new/choose\">issue</a> or view\r\n                        our <a href=\"https://github.com/AF-Tools/bullet-buddy/\">GitHub Page</a></p>\r\n                    <p>Maintained by Nicholas Schweikart</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// implementing fontReady as a promise (instead of using document.fonts.ready) to make it Edge compatible\r\n// const fontReady = new Promise(function(resolve,rej){\r\n//   window.WebFont.load({\r\n//       custom: {\r\n//           families: ['AdobeTimes']\r\n//       }\r\n//   });\r\n//   resolve();\r\n// });\r\n\r\n// fontReady.then( ()=>{\r\n//   ReactDOM.render(\r\n//     <React.StrictMode>\r\n//       <App />\r\n//     </React.StrictMode>,\r\n//     document.getElementById('root')\r\n//   );\r\n// });\r\n\r\nReactDOM.render(\r\n      <React.StrictMode>\r\n        <App />\r\n      </React.StrictMode>,\r\n      document.getElementById('root')\r\n    );\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}