{"version":3,"sources":["components/RawBulletTextArea.js","components/Bullets/Synonym.js","components/Bullets/Word.js","components/Bullets/Bullet.js","components/Bullets/BulletEditor.js","components/Bullets/BulletOutputViewerBullet.js","components/Bullets/BulletOutputViewer.js","components/AcronymViewer.js","components/AbbreviationTable.js","App.js","serviceWorker.js","index.js"],"names":["React","Component","Synonym","props","key","this","synonym","parentIndex","className","onClick","Word","previousLookup","handleTimeout","handlePopoverOpen","setTimeout","getSynonyms","value","setState","open","handlePopoverClose","clearTimeout","handleSynonymClick","state","synonyms","changeWord","handleHover","isNotEditable","word","Boolean","match","length","index","getAbbreviations","abbreviationData","abbreviation","find","row","abbr","toLowerCase","Axios","get","then","res","status","data","all","map","item","catch","err","console","log","JSON","stringify","isEditable","bind","prevProps","prevState","snapshot","dynamicClassName","abbrvData","onMouseEnter","onMouseLeave","synList","syn","Bullet","tokenize","text","output","split","forEach","seg","innerSeg","push","s","tweak","sentence","replace","newWord","i","newBullet","updateBulletText","join","indexOfColon","indexOfDashes","BulletEditor","extractBullets","bullets","shift","bullet","trim","newText","charAt","toUpperCase","slice","updateInputText","onChange","e","c","nativeEvent","target","childNodes","Array","from","node","innerText","ref","createRef","inputBullets","style","width","BulletOutputViewerBullet","xToPx","x","div","document","createElement","display","height","body","appendChild","px","parseFloat","window","getComputedStyle","parentNode","removeChild","evaluateBullet","current","idealWidth","oldPWidth","getBoundingClientRect","widthDiff","getNormalBullet","getSmallestBullet","getLargestBullet","idealHeight","optimized","bulletText","processing","processed","currentBulletText","newBulletText","optimizeBullet","handleBulletChange","Promise","resolve","setStateAsync","prevEval","prevBullet","grow","spaceIndexes","terminate","useIndex","action","len","optimal","pop","val","splice","Math","floor","space","substring","currentEval","BulletOutputViewer","handleSelectionCopy","preventDefault","getSelection","toString","clipboardData","setData","handleCopyButtonClick","range","createRange","selectNode","removeAllRanges","addRange","execCommand","bulletsText","onCopy","marginTop","Button","variant","color","size","startIcon","AcronymViewer","extractAcronyms","acs","sort","alreadyAdded","indexOf","acronyms","tableSettings","columns","type","stretchH","autoWrapRow","maxRows","Infinity","manualRowResize","manualColumnResize","rowHeaders","colHeaders","trimWhitespace","enterBeginsEditing","manualRowMove","manualColumnMove","columnSorting","indicator","autoColumnSize","minRows","minSpareRows","contextMenu","licenseKey","search","queryMethod","queryStr","callback","instance","col","result","DEFAULT_CALLBACK","testResult","getCellMeta","isSearchResult","apply","arguments","AbbreviationTable","handleChange","onAbbrevitionDataChange","settings","afterChange","App","saveSettings","localStorage","setItem","error","getSettings","getItem","parse","onAbbreviationTableChange","setAbbreviationTable","newTable","filter","abbreviationTable","handleTextAreaUpdate","inputTextRef","scrollHeight","bulletInputText","handleSelect","bulletTypeChange","newValue","tabValue","bulletType","toggleDrawer","event","v","drawerOpen","thesaurusViewer","visible","posX","posY","wordList","el","querySelector","remove","widthSettings","OPR","EPR","widthSetting","currentBgColor","id","AppBar","position","backgroundColor","Toolbar","Typography","Tabs","Tab","label","Container","maxWidth","Grid","container","justifyContent","spacing","xs","md","lg","xl","align","rows","resize","minHeight","component","Drawer","anchor","onClose","href","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.df3dff8f.chunk.js","sourcesContent":["import React from \"react\";\n\n/**\n * Input Bullet Text Area\n */\nclass InputBulletTextArea extends React.Component {\n  /**\n   * Constructor\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  /**\n   * Component Did Mount\n   */\n  componentDidMount() {}\n\n  /**\n   * Text Area Update\n   * @param event\n   */\n  textAreaUpdate = (event) => {\n    this.setState({ text: event.target.value });\n  };\n\n  /**\n   * Render\n   * @returns {JSX.Element}\n   */\n  render() {\n\n    const widthSettings = {\n      EPR: \"202.321mm\",\n      OPR: \"201.041mm\",\n    };\n\n    return (\n      <textarea\n        rows={5}\n        value={this.state.text}\n        onChange={this.textAreaUpdate}\n        className=\"bullet-text\"\n        style={{\n          width: widthSettings[this.props.bulletType],\n          resize: \"none\",\n        }}\n      />\n    );\n  }\n}\n\nexport default InputBulletTextArea;\n","import React from \"react\";\n\n/**\n *\n */\nclass Synonym extends React.Component {\n  /**\n   * Constructor\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n  }\n\n  /**\n   * Render\n   * @returns {JSX.Element}\n   */\n  render() {\n    return (\n      <li\n        key={this.props.synonym + this.props.parentIndex}\n        className=\"synonym-button\"\n        onClick={this.props.onClick}\n      >\n        {this.props.synonym}\n      </li>\n    );\n  }\n\n}\n\nexport default Synonym;","import React from \"react\";\nimport Axios from \"axios\";\nimport Synonym from \"./Synonym\";\n\n/**\n * Word\n */\nclass Word extends React.Component {\n  previousLookup = {};\n  handleTimeout = null;\n\n  /**\n   * Constructor\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      synonyms: null,\n      isEditable: null,\n    };\n\n    this.handlePopoverClose = this.handlePopoverClose.bind(this);\n    this.handlePopoverOpen = this.handlePopoverOpen.bind(this);\n  }\n\n  /**\n   * Handle Popover Open\n   */\n  handlePopoverOpen = () => {\n    this.handleTimeout = setTimeout(() => {\n      this.getSynonyms(this.props.value);\n      this.setState({ open: true });\n    }, 300);\n  };\n\n  /**\n   * Handle Popover Close\n   */\n  handlePopoverClose = () => {\n    clearTimeout(this.handleTimeout);\n    this.setState({ open: false });\n  };\n\n  handleSynonymClick = (synonym, parentIndex) => {\n    this.state.value = synonym;\n    this.setState({\n      open: false,\n      synonyms: [],\n    });\n    this.props.changeWord(synonym, parentIndex);\n  };\n\n  /**\n   * Handle Hover\n   */\n  handleHover = () => {\n    // Change CSS\n    // Load synonyms and populate lists\n  };\n\n  /**\n   * Is Not Editable\n   * @param word\n   * @returns {boolean}\n   */\n  isNotEditable = (word) => {\n    return Boolean(\n      (word.match(/([A-Z]{3,})/) != null) |\n        (word.match(/([0-9])/) != null) |\n        (word.length <= 3) |\n        (this.props.index < 1)\n    );\n  };\n\n  /**\n   * Get Abbreviations\n   * @param word\n   * @returns {null|*}\n   */\n  getAbbreviations = (word) => {\n    if (this.props.abbreviationData === null) {\n      return null;\n    }\n    // extract dictionary\n    const abbreviation = this.props.abbreviationData.find(\n      (row) =>\n        (row.abbr === word.toLowerCase()) |\n        (row.value.toLowerCase() === word.toLowerCase())\n    );\n\n    return typeof abbreviation === \"undefined\" ? null : abbreviation;\n  };\n\n  /**\n   * Get Synonyms\n   * @param word\n   */\n  getSynonyms = (word) => {\n    ////console.log(\"Attempting to get synonyms for: \" + word)\n    if (word in this.previousLookup) {\n      return this.previousLookup[word];\n    } else {\n      if (word.length > 3) {\n        Axios.get(\"https://api.datamuse.com/words?max=15&ml=\" + word)\n          .then((res) => {\n            if (res.status === 200) {\n              const data = res.data;\n              if (data.length !== 0) {\n                const all = data.map((item) => {\n                  return item.word;\n                });\n                this.setState({ synonyms: all });\n                this.previousLookup[word] = all;\n              }\n            } else {\n              this.setState({ synonyms: [] });\n            }\n          })\n          .then(() => {\n            if(this.state.synonyms.length > 0) {\n\n            }\n          })\n          .catch((err) => {\n            console.log(`ERR: ${JSON.stringify(err)}`);\n          });\n      } else {\n        this.setState({ synonyms: [] });\n      }\n    }\n  };\n\n  /**\n   * Component Did Mount\n   */\n  componentDidMount() {\n    if (this.isNotEditable(this.props.value)) {\n      this.setState({ isEditable: false });\n    } else {\n      this.setState({ isEditable: true });\n    }\n  }\n\n  /**\n   * Component Did Update\n   * @param prevProps\n   * @param prevState\n   * @param snapshot\n   */\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.value !== prevProps.value && this.state.isEditable) {\n      this.getSynonyms(this.props.value);\n    }\n  }\n\n  /**\n   * Render\n   * @returns {JSX.Element}\n   */\n  render() {\n    let word = this.props.value;\n\n    let dynamicClassName = \"bullet-editor-word-editable\";\n\n    // Check if able to be abbreviated\n    const abbrvData = this.getAbbreviations(word);\n\n    if (abbrvData !== null) {\n      if (abbrvData.value.toLowerCase() === word.toLowerCase()) {\n        // Word can be Abbreviated\n        dynamicClassName = dynamicClassName + \" abbreviated popup\";\n        return (\n          <span\n            className={dynamicClassName}\n            onMouseEnter={this.handlePopoverOpen}\n            onMouseLeave={this.handlePopoverClose}\n          >\n            {word}\n            <span className={this.state.open ? \"popuptext show\" : \"popuptext\"}>\n              <ul className=\"popuptextlist\">\n                <li\n                  className=\"synonym-button\"\n                  onClick={() =>\n                    this.props.changeWord(\n                      abbrvData.abbr,\n                      this.props.parentIndex\n                    )\n                  }\n                >\n                  {abbrvData.abbr}\n                </li>\n              </ul>\n            </span>\n          </span>\n        );\n      }\n\n      if (abbrvData.abbr === word) {\n        // Already abbreviated word\n        dynamicClassName = dynamicClassName + \" approved-abbreviation popup\";\n        return (\n          <span\n            className={dynamicClassName}\n            onMouseEnter={this.handlePopoverOpen}\n            onMouseLeave={this.handlePopoverClose}\n          >\n            {word}\n            <span className={this.state.open ? \"popuptext show\" : \"popuptext\"}>\n              <ul className=\"popuptextlist\">\n                <li\n                  className=\"synonym-button\"\n                  onClick={() =>\n                    this.props.changeWord(\n                      abbrvData.value.toLowerCase(),\n                      this.props.parentIndex\n                    )\n                  }\n                >\n                  {abbrvData.value}\n                </li>\n              </ul>\n            </span>\n          </span>\n        );\n      }\n    }\n\n    if (this.isNotEditable(word)) {\n      dynamicClassName = \"bullet-editor-word popup\";\n      return <span className={dynamicClassName}>{word}</span>;\n    }\n\n    dynamicClassName = dynamicClassName + \" popup\";\n\n    let synList = null;\n    if (this.state.synonyms !== null) {\n      synList = this.state.synonyms.map((syn) => (\n        <Synonym\n          key={syn}\n          className=\"synonym-button\"\n          parentIndex={this.props.parentIndex}\n          synonym={syn}\n          onClick={() => this.handleSynonymClick(syn, this.props.parentIndex)}\n        />\n      ));\n    }\n\n    return (\n      <span\n        className={dynamicClassName}\n        onMouseEnter={this.handlePopoverOpen}\n        onMouseLeave={this.handlePopoverClose}\n      >\n        {word}\n        <span className={this.state.open ? \"popuptext show\" : \"popuptext\"}>\n          <ul className=\"popuptextlist\">{synList}</ul>\n        </span>\n      </span>\n    );\n  }\n}\n\nexport default Word;\n","import React from \"react\";\nimport Word from \"./Word\";\n\n/**\n * Class Bullet\n */\nclass Bullet extends React.Component {\n  /**\n   * Constructor\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      indexOfColon: null,\n      indexOfDashes: null,\n    };\n    this.changeWord = this.changeWord.bind(this);\n  }\n\n  /**\n   * Component Did Mount\n   */\n  componentDidMount() {}\n\n  /**\n   * Component Did Update\n   * @param prevProps\n   * @param prevState\n   * @param snapshot\n   */\n  componentDidUpdate(prevProps, prevState, snapshot) {}\n\n  /**\n   * Tokenize\n   * @param text\n   * @returns {*[]}\n   */\n  tokenize = (text) => {\n    let output = [];\n\n    text.split(/\\s/).forEach((seg) => {\n      let innerSeg = seg.split(/([/;,-])/);\n      if (innerSeg.length === 1) {\n        output.push(seg);\n        output.push(\" \");\n      } else {\n        innerSeg.forEach((s) => {\n          if (s !== \"\") output.push(s);\n        });\n        output.push(\" \");\n      }\n    });\n    return output;\n  };\n\n  /**\n   * Tweak\n   * @param sentence\n   * @returns {*}\n   */\n  tweak = (sentence) => {\n    // adds a 0-width space (\\u200B) after forward slashes to cause them to wrap\n    sentence = sentence.replace(/(\\w)\\//g, \"$1/\\u200B\");\n\n    // adds a non-breaking dash (\\u2011) instead of a dash to prevent wrapping\n    sentence = sentence.replace(/-/g, \"\\u2011\");\n    return sentence;\n  };\n\n  /**\n   * Change Word\n   * @param newWord\n   * @param i\n   */\n  changeWord = (newWord, i) => {\n    let newBullet = this.tokenize(this.props.text);\n    newBullet[i] = newWord;\n    this.props.updateBulletText(newBullet.join(\"\"), this.props.parentIndex);\n  };\n\n  /**\n   * Render\n   * @returns {unknown[]}\n   */\n  render() {\n    const { text } = this.props;\n    return this.tokenize(text).map((word,i) => {\n      return (\n        <Word\n          key={\"popup\" + i}\n          value={word}\n          parentIndex={i}\n          changeWord={this.changeWord}\n          abbreviationData={this.props.abbreviationData}\n        />\n      );\n    });\n  }\n}\n\nexport default Bullet;\n","import React from \"react\";\nimport Bullet from \"./Bullet\";\n\n/**\n * Bullet Editor\n */\nclass BulletEditor extends React.Component {\n  /**\n   * Constructor\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      bullets: [],\n    };\n    this.ref = React.createRef();\n    this.updateBulletText = this.updateBulletText.bind(this);\n  }\n\n  /**\n   * Component Did Mount\n   */\n  componentDidMount() {\n    this.setState({\n      bullets: this.extractBullets(this.props.inputBullets),\n    });\n  }\n\n  /**\n   * Component Did Update\n   * @param prevProps\n   * @param prevState\n   * @param snapshot\n   */\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.inputBullets !== prevProps.inputBullets) {\n      this.setState({ bullets: this.extractBullets(this.props.inputBullets) });\n    }\n  }\n\n  /**\n   * Extract Bullets\n   * @param text\n   * @returns {*}\n   */\n  extractBullets = (text) => {\n    let bullets = text.split(/-\\s/);\n    bullets.shift();\n    bullets = bullets.map((bullet) => {\n      return \"- \" + bullet.trim();\n    });\n    return bullets;\n  };\n\n  /**\n   * Update Bullet Text\n   * @param newText\n   * @param i\n   */\n  updateBulletText = (newText, i) => {\n    let bullets = this.state.bullets;\n    bullets[i] = newText;\n    bullets.join(\" \");\n    bullets[i] = bullets[i].replace(/\\s;\\s/, \";\");\n    bullets[i] = bullets[i].replace(/\\s-{2}\\s/, \"--\");\n    bullets[i] =\n      \"- \" + bullets[i].charAt(2).toUpperCase() + bullets[i].slice(3);\n    this.props.updateInputText(bullets.join(\"\\n\"));\n  };\n\n  /**\n   * On Change\n   * @param e\n   * @param i\n   */\n  onChange = (e, i) => {\n    let c = e.nativeEvent.target.childNodes;\n    c = Array.from(c).map((node) => {\n      return node.innerText;\n    });\n    this.updateBulletText(c.join(\" \"), i);\n  };\n\n  /**\n   * Render\n   * @returns {JSX.Element}\n   */\n  render() {\n    return (\n      <div>\n        <div className=\"bullet-editor\" style={{ width: this.props.width }}>\n          {this.state.bullets.map((bullet, i) => {\n            return (\n              <div className=\"bullet-editor-bullet\"\n                   key={`bullet${i}`}>\n                <Bullet\n                  text={bullet}\n                  parentIndex={i}\n                  updateBulletText={this.updateBulletText}\n                  abbreviationData={this.props.abbreviationData}\n                />\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"legend\">\n          Legend:\n          <span className=\"approved-abbreviation\">Approved Abbreviation</span>\n          <span className=\"abbreviatable\">Abbreviatable Word</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default BulletEditor;","import React from \"react\";\r\n\r\nconst smallSpace = \"\\u2006\"; // 1/6 em space [same as thinspace: \\u2009]\r\n// const midSpace = \"\\u2005\"; // 1/4 em space\r\n// const normalSpace = \" \";\r\nconst largeSpace = \"\\u2004\"; // 1/3 em space (thick space)\r\n\r\n/**\r\n * Bullet Output Viewer Bullet\r\n */\r\nclass BulletOutputViewerBullet extends React.Component {\r\n  /**\r\n   * Constructor\r\n   * @param props\r\n   */\r\n  constructor(props) {\r\n    super(props);\r\n    this.ref = React.createRef();\r\n    this.state = {\r\n      idealHeight: null,\r\n      idealWidth: null,\r\n      optimized: false,\r\n      bulletText: null,\r\n    };\r\n    this.processing = false;\r\n    this.processed = false;\r\n  }\r\n\r\n  /**\r\n   * Component Did Mount\r\n   */\r\n  componentDidMount() {\r\n    this.setState({ bulletText: this.props.bulletText });\r\n  }\r\n\r\n  /**\r\n   * Component Did Update\r\n   * @param prevProps\r\n   * @param prevState\r\n   * @param snapshot\r\n   */\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    const { currentBulletText } = this.state;\r\n    const { width } = this.props;\r\n\r\n    let newBulletText =\r\n      prevState.bulletText !== currentBulletText && currentBulletText !== null;\r\n\r\n    // We have a props update, clear everything and start over\r\n    if (\r\n      this.props.bulletText !== prevProps.bulletText ||\r\n      width !== prevProps.width\r\n    ) {\r\n      this.processing = false;\r\n      this.processed = false;\r\n      this.setState({ bulletText: this.props.bulletText, optimized: false });\r\n    } else if (newBulletText && !this.processing && !this.processed) {\r\n      console.log(\"did update with new state to process\");\r\n      this.optimizeBullet();\r\n      this.props.handleBulletChange(this.state.bulletText, this.props.index);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * X to Pixel\r\n   * @param x\r\n   * @returns {number}\r\n   */\r\n  xToPx = (x) => {\r\n    let div = document.createElement(\"div\");\r\n    div.style.display = \"block\";\r\n    div.style.height = x;\r\n    document.body.appendChild(div);\r\n    let px = parseFloat(window.getComputedStyle(div, null).height);\r\n    div.parentNode.removeChild(div);\r\n    return px;\r\n  };\r\n\r\n  /**\r\n   * Evaluate Bullet\r\n   * @returns {{widthDiff: number}}\r\n   */\r\n  evaluateBullet = () => {\r\n    if (this.ref !== null) {\r\n      const node = this.ref.current;\r\n      const parentNode = node.parentNode;\r\n\r\n      let idealWidth = this.xToPx(this.props.width);\r\n\r\n      // // Undo wrapping so we get the single line height\r\n      // node.style.whiteSpace = 'nowrap';\r\n\r\n      // let idealHeight = node.getBoundingClientRect().height;\r\n      let oldPWidth = parentNode.style.width;\r\n      parentNode.style.width = \"800.00mm\";\r\n\r\n      const { width, height } = node.getBoundingClientRect();\r\n\r\n      // // Re-enable wrapping\r\n      // node.style.whiteSpace = 'pre-wrap';\r\n      // node.style.wordBreak = \"break-word\";\r\n      parentNode.style.width = oldPWidth;\r\n\r\n      let widthDiff = width - idealWidth;\r\n\r\n      // if (height > idealHeight + 2) {\r\n      //   wrapped = true;\r\n      // }\r\n\r\n      ////console.log(`bullet width difference: ${widthDiff}`)\r\n      return { widthDiff: widthDiff };\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get Normal Bullet\r\n   * @param text\r\n   * @returns {string}\r\n   */\r\n  getNormalBullet = (text) => {\r\n    let output = text.split(/\\s/);\r\n    output.shift(); // remove hyphen then add later\r\n    output = output.join(\" \");\r\n    return \"- \" + output.trim();\r\n  };\r\n\r\n  /**\r\n   * Get Smallest Bullet\r\n   * @param text\r\n   * @returns {string}\r\n   */\r\n  getSmallestBullet = (text) => {\r\n    let output = text.split(/\\s/);\r\n    output.shift(); // remove hyphen then add later\r\n    output = output.join(smallSpace);\r\n    return \"- \" + output.trim();\r\n  };\r\n\r\n  /**\r\n   * Get Largest Bullet\r\n   * @param text\r\n   * @returns {string}\r\n   */\r\n  getLargestBullet = (text) => {\r\n    let output = text.split(/\\s/);\r\n    output.shift(); // remove hypen then add later\r\n    output = output.join(largeSpace);\r\n    return \"- \" + output.trim();\r\n  };\r\n\r\n  /**\r\n   * Set STate Async\r\n   * @param state\r\n   * @returns {Promise<unknown>}\r\n   */\r\n  setStateAsync(state) {\r\n    return new Promise((resolve) => {\r\n      this.setState(state, resolve);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Optimize Bullet\r\n   * @returns {Promise<string|string>}\r\n   */\r\n  async optimizeBullet() {\r\n    let bullet = this.state.bulletText;\r\n    if (bullet === null) {\r\n      return;\r\n    }\r\n    this.processing = true;\r\n    console.log(\"building bullet: \" + bullet);\r\n    bullet = this.getNormalBullet(bullet);\r\n    await this.setStateAsync({ bulletText: bullet });\r\n    let prevEval = this.evaluateBullet();\r\n    let prevBullet = bullet;\r\n    let grow = true;\r\n\r\n    if (prevEval.widthDiff > -0.02 && prevEval.widthDiff < 0) {\r\n      // We are withing 1mm already\r\n      console.log(\"Bullet Already Optimized\");\r\n      this.processed = true;\r\n      this.processing = false;\r\n      this.setState({ bulletText: bullet, optimized: true });\r\n      return;\r\n    }\r\n\r\n    if (prevEval.widthDiff > 0) {\r\n      // shrink bullet\r\n      console.log(\"Shrinking Bullet: \" + bullet);\r\n      grow = false;\r\n    } else {\r\n      console.log(\"Shrinking Bullet: \" + bullet);\r\n    }\r\n\r\n    let spaceIndexes = [];\r\n\r\n    // Find position of all space chars\r\n    Array.from(bullet).forEach((word, i) => {\r\n      if (word.match(/\\s/)) {\r\n        spaceIndexes.push(i);\r\n      }\r\n    });\r\n\r\n    // Remove the first space since we dont want to add one after hyphen\r\n    spaceIndexes.shift();\r\n\r\n    let terminate = false;\r\n    let useIndex = [];\r\n    let action = 0;\r\n    let len = spaceIndexes.length;\r\n    let optimal = true;\r\n\r\n    // Shuffle up the space replacement\r\n    for (let i = 0; i < len; i++) {\r\n      switch (action) {\r\n        case 0:\r\n          useIndex.push(spaceIndexes.shift());\r\n          break; // change space towards Beginning\r\n\r\n        case 1:\r\n          useIndex.push(spaceIndexes.pop());\r\n          break; // Change space towards end\r\n\r\n        case 2:\r\n          let val = spaceIndexes.splice(Math.floor(spaceIndexes.length / 2), 1);\r\n          useIndex.push(val[0]);\r\n          break; // Change space in the middle\r\n\r\n        default:\r\n          break;\r\n      }\r\n      action += 1;\r\n      if (action === 3) {\r\n        action = 0;\r\n      }\r\n    }\r\n\r\n    while (!terminate) {\r\n      if (useIndex.length === 0) {\r\n        console.log(\"exhausted all index values\");\r\n        terminate = true;\r\n        optimal = false;\r\n        continue;\r\n      }\r\n\r\n      const space = grow ? largeSpace : smallSpace;\r\n\r\n      // Replace the index with the appropriate space char\r\n      let i = useIndex.shift();\r\n      bullet = bullet.substring(0, i) + space + bullet.substring(i + 1);\r\n\r\n      // Re-evaluate the size attributes\r\n      await this.setStateAsync({ bulletText: bullet });\r\n      let currentEval = this.evaluateBullet();\r\n\r\n      if (grow) {\r\n        // IF we are still short of the line\r\n        if (currentEval.widthDiff < 0) {\r\n          // Still room to go.\r\n          prevEval = currentEval;\r\n          prevBullet = bullet;\r\n          continue;\r\n        }\r\n        // If we past the line\r\n        if (currentEval.widthDiff > 0) {\r\n          // Grew to big keep the old bullet\r\n          bullet = prevBullet;\r\n          terminate = true;\r\n          optimal = true;\r\n        }\r\n      } else {\r\n        if (currentEval.widthDiff > 0) {\r\n          prevEval = currentEval;\r\n          prevBullet = bullet;\r\n          continue;\r\n        }\r\n\r\n        if (currentEval.widthDiff < 0) {\r\n          optimal = true;\r\n          terminate = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    // If we get here we should be optimized!\r\n    this.processed = true;\r\n    this.processing = false;\r\n    this.setState({ bulletText: bullet, optimized: optimal });\r\n\r\n    return bullet;\r\n  }\r\n\r\n  /**\r\n   * Tweak\r\n   * @param sentence\r\n   * @returns {*}\r\n   */\r\n  tweak = (sentence) => {\r\n    // adds a 0-width space (\\u200B) after forward slashes to cause them to wrap\r\n    sentence = sentence.replace(/(\\w)\\//g, \"$1/\\u200B\");\r\n\r\n    // adds a non-breaking dash (\\u2011) instead of a dash to prevent wrapping\r\n    sentence = sentence.replace(/-/g, \"\\u2011\");\r\n    return sentence;\r\n  };\r\n\r\n  /**\r\n   * Render\r\n   * @returns {JSX.Element}\r\n   */\r\n  render() {\r\n    const { optimized } = this.state;\r\n    let className = optimized\r\n      ? \"bullet-output-bullet optimized\"\r\n      : \"bullet-output-bullet notoptimized\";\r\n    return (\r\n      <div className={className} ref={this.ref}>\r\n        {this.state.bulletText}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BulletOutputViewerBullet;","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\nimport BulletOutputViewerBullet from \"./BulletOutputViewerBullet\";\n\n/**\n * Bullet Output Viewer\n */\nclass BulletOutputViewer extends React.Component {\n  /**\n   * Constructor\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      bullets: [],\n    };\n    this.ref = React.createRef();\n  }\n\n  /**\n   * Component Did Mount\n   */\n  componentDidMount() {\n    //console.log(this.props.bulletsText)\n    this.setState({ bullets: this.extractBullets(this.props.bulletsText) });\n  }\n\n  /**\n   * Component Did Update\n   * @param prevProps\n   * @param prevState\n   * @param snapshot\n   */\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.bulletsText !== prevProps.bulletsText) {\n      this.setState({ bullets: this.extractBullets(this.props.bulletsText) });\n    }\n  }\n\n  /**\n   * Extract Bullets\n   * @param text\n   * @returns {*}\n   */\n  extractBullets = (text) => {\n    let bullets = text.split(/-\\s/);\n    bullets.shift();\n    bullets = bullets.map((bullet) => {\n      return \"- \" + bullet.trim() + \"\\r\\n\";\n    });\n    return bullets;\n  };\n\n  /**\n   * Handle Selection Copy\n   * @param e\n   */\n  handleSelectionCopy = (e) => {\n    e.preventDefault();\n    let text = window.getSelection().toString();\n    text = this.extractBullets(text);\n    text = text.join(\"\");\n    text.replace(/\\n/g, \"\\r\\n\"); //need this for WINDOWS!\n    //console.log('Copy event: ' + text)\n    e.clipboardData.setData(\"text/plain\", text);\n  };\n\n  /**\n   * Handle Copy Button Click\n   */\n  handleCopyButtonClick = () => {\n    let range = document.createRange();\n    range.selectNode(this.ref.current);\n    window.getSelection().removeAllRanges(); // clear current selection\n    window.getSelection().addRange(range);\n    document.execCommand(\"copy\");\n    window.getSelection().removeAllRanges(); // clear current selection\n  };\n\n  /**\n   * Handle Bullet Change\n   * @param newText\n   * @param i\n   */\n  handleBulletChange = (newText, i) => {\n    let bullets = this.state.bullets;\n    bullets[i] = newText;\n    this.setState({ bullets: bullets });\n  };\n\n  /**\n   * Render\n   * @returns {JSX.Element}\n   */\n  render() {\n    return (\n      <div>\n        <div\n          className=\"bullet-output-container\"\n          style={{ width: this.props.width }}\n          onCopy={this.handleSelectionCopy}\n        >\n          <p>\n            XX. AMAZING BULLETS{\" \"}\n            <mark>(Don't forget to copy to the right place!)</mark>\n          </p>\n          <div ref={this.ref}>\n            {\n              // Create a bullet around each bullet\n              this.state.bullets.map((bullet, i) => {\n                return (\n                  <BulletOutputViewerBullet\n                    width={this.props.width}\n                    bulletText={bullet}\n                    index={i}\n                    key={i.toString()}\n                    handleBulletChange={this.handleBulletChange}\n                  />\n                );\n              })\n            }\n          </div>\n        </div>\n\n        <div style={{ marginTop: \"1em\" }}>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            size=\"small\"\n            onClick={(e) => this.handleCopyButtonClick(e)}\n            startIcon={<FileCopyIcon />}\n          >\n            Copy Bullets to Clipboard\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default BulletOutputViewer;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\n\n/**\n * Acronym Viewer\n *\n * Display of Acronyms\n */\nclass AcronymViewer extends React.Component {\n  /**\n   * Constructor\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n  }\n\n  /**\n   * Handle Copy Button Click\n   */\n  handleCopyButtonClick = () => {\n    let range = document.createRange();\n    range.selectNode(this.ref.current);\n    window.getSelection().removeAllRanges(); // clear current selection\n    window.getSelection().addRange(range);\n    document.execCommand(\"copy\");\n    window.getSelection().removeAllRanges(); // clear current selection\n  };\n\n  /**\n   * Extract Acronyms\n   * @returns {string|*}\n   */\n  extractAcronyms = () => {\n    const { text } = this.props;\n    if (text === null) {\n      return \"no acronyms yet\";\n    }\n    let acs = text.match(/[A-Z]{2,}/g);\n    if (acs === null) {\n      return \"no acronyms yet\";\n    }\n    acs = acs.sort();\n    let alreadyAdded = [];\n    acs = acs.map((acs) => {\n      if (alreadyAdded.indexOf(acs) === -1) {\n        alreadyAdded.push(acs);\n        return \" (\" + acs + \"); \";\n      }\n      return \"\";\n    });\n    return acs;\n  };\n\n  /**\n   * Render\n   * @returns {JSX.Element}\n   */\n  render() {\n    const acronyms = this.extractAcronyms();\n    return (\n      <div>\n        <div\n          className=\"bullet-output-container\"\n          style={{\n            width: this.props.width,\n          }}\n        >\n          <p>\n            X. REMARKS{\" \"}\n            <mark>(use this section to spell out acronyms from the front)</mark>\n          </p>\n          <div className=\"bullet-output-bullet\" ref={this.ref}>\n            {acronyms}\n          </div>\n        </div>\n\n        <div style={{ marginTop: \"1em\" }}>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            size=\"small\"\n            onClick={(e) => this.handleCopyButtonClick(e)}\n            startIcon={<FileCopyIcon />}\n          >\n            Copy Acronym List to Clipboard\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default AcronymViewer;\n","import React from \"react\";\nimport { HotTable } from \"@handsontable/react\";\n\nconst tableSettings = {\n  columns: [\n    {\n      data: \"value\",\n      type: \"text\",\n    },\n    {\n      data: \"abbr\",\n      type: \"text\",\n    },\n  ],\n  stretchH: \"all\",\n  width: 500,\n  autoWrapRow: true,\n  height: 500,\n  maxRows: Infinity,\n  manualRowResize: true,\n  manualColumnResize: true,\n  rowHeaders: false,\n  colHeaders: [\"Word\", \"Abbreviation\"],\n  trimWhitespace: false,\n  enterBeginsEditing: false,\n  manualRowMove: true,\n  manualColumnMove: true,\n  columnSorting: {\n    indicator: true,\n  },\n  autoColumnSize: false,\n  minRows: 2,\n  minSpareRows: 1,\n  contextMenu: true,\n  licenseKey: \"non-commercial-and-evaluation\",\n  search: {\n    queryMethod: function (queryStr, value) {\n      return queryStr.toString() === value.toString();\n    },\n    callback: function (instance, row, col, value, result) {\n      const DEFAULT_CALLBACK = function (instance, row, col, data, testResult) {\n        instance.getCellMeta(row, col).isSearchResult = testResult;\n      };\n      DEFAULT_CALLBACK.apply(this, arguments);\n    },\n  },\n};\n\n/**\n * Abbreviation Table\n *\n * Table for adding substitutable abbreviations.\n * Ex: Squadron -> Sq\n */\nclass AbbreviationTable extends React.Component {\n\n  /**\n   * Constructor\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  /**\n   * Handle Change\n   * @param e\n   */\n  handleChange = (e) => {\n    if (e === null) {\n      return;\n    }\n    this.props.onAbbrevitionDataChange(e);\n  };\n\n  /**\n   * Render\n   * @returns {JSX.Element}\n   */\n  render() {\n    const { abbreviationData } = this.props;\n    return (\n      <HotTable\n        className={\"abbreviation-table\"}\n        settings={tableSettings}\n        data={abbreviationData}\n        afterChange={this.handleChange}\n      />\n    );\n  }\n}\n\nexport default AbbreviationTable;","import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport { Tab, Tabs } from \"@material-ui/core\";\nimport \"./styles/css/App.css\";\nimport \"./components/RawBulletTextArea\";\nimport BulletEditor from \"./components/Bullets/BulletEditor\";\nimport BulletOutputViewer from \"./components/Bullets/BulletOutputViewer\";\nimport AcronymViewer from \"./components/AcronymViewer\";\nimport AbbreviationTable from \"./components/AbbreviationTable\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport ViewListIcon from \"@material-ui/icons/ViewList\";\n\n/**\n * App\n */\nclass App extends React.Component {\n  /**\n   * Constructor\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      bulletInputText:\n        \"- Action section of bullet should go here; put the how/what you did in this part--bring it home w/ a great impact line\\n- This tool can optimize spacing; output will be red if the optimizer could not fix spacing with 2004 or 2006 Unicode spaces\",\n      abbreviationData: [\n        { value: \"organizations\", abbr: \"orgs\" },\n        { value: \"expandable\", abbr: \"expdble\" },\n      ],\n      abbreviationTable: [\n        { value: \"organizations\", abbr: \"orgs\" },\n        { value: \"expandable\", abbr: \"expdble\" },\n      ],\n      bulletType: \"EPR\",\n      tabValue: 0,\n      drawerOpen: false,\n      thesaurusViewer: {\n        visible: false,\n        posX: 0,\n        posY: 0,\n        wordList: null,\n      },\n    };\n    this.inputTextRef = React.createRef();\n    this.handleTextAreaUpdate = this.handleTextAreaUpdate.bind(this);\n  }\n\n  /**\n   * Component Did Mount\n   */\n  componentDidMount() {\n    const el = document.querySelector(\".loader-container\");\n    if (el) {\n      el.remove(); // removing the spinner element\n      //this.setState({ loading: false }); // showing the app\n    }\n    let settings = this.getSettings();\n    if (settings !== null) {\n      this.setState({ abbreviationData: settings.abbreviationData });\n      this.setAbbreviationTable(settings.abbreviationData);\n    }\n  }\n\n  /**\n   * Component Did Update\n   * @param prevProps\n   * @param prevState\n   * @param snapshot\n   */\n  componentDidUpdate(prevProps, prevState, snapshot) {}\n\n  /**\n   * Save Settings\n   * @param settings\n   */\n  saveSettings = (settings) => {\n    try {\n      window.localStorage.setItem(\"settings\", JSON.stringify(settings));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /**\n   * Get Settings\n   * @returns {null|any}\n   */\n  getSettings = () => {\n    try {\n      if (window.localStorage.getItem(\"settings\")) {\n        return JSON.parse(window.localStorage.getItem(\"settings\"));\n      }\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n    return null;\n  };\n\n  /**\n   * On Abbreviation Table Change\n   */\n  onAbbreviationTableChange = () => {\n    const { abbreviationData } = this.state;\n    this.setAbbreviationTable(abbreviationData);\n    let settings = { abbreviationData: abbreviationData };\n    this.saveSettings(settings);\n  };\n\n  /**\n   * Set Abbreviation Table\n   * @param abbreviationData\n   */\n  setAbbreviationTable = (abbreviationData) => {\n    let newTable = abbreviationData.filter(\n      (row) => row.value !== null && row.abbr !== null\n    );\n    newTable = newTable.map((row) => {\n      row.abbr = row.abbr.trim();\n      row.value = row.value.trim();\n      return row;\n    });\n    this.setState({ abbreviationTable: newTable });\n  };\n\n  /**\n   * Handle Text Area Update\n   * @param text\n   */\n  handleTextAreaUpdate = (text) => {\n    console.log(\"Update text with: \");\n    console.log(text);\n    this.inputTextRef.current.style.height =\n      this.inputTextRef.current.scrollHeight + \"px\";\n    this.setState({ bulletInputText: text });\n  };\n\n  /**\n   * Handle Select\n   */\n  handleSelect = () => {\n    // let selection = window.getSelection();\n    // // Get position of text selection\n    // let offsetStart = this.inputTextRef.current.selectionStart;\n    // let offsetEnd = this.inputTextRef.current.selectionEnd;\n    // // Get potion of selection in viewport\n    // let x = e.nativeEvent.clientX;\n    // let y = e.nativeEvent.clientY;\n    // console.log(\"Start: \" + offsetStart + \"END: \" + offsetEnd + \" X: \" +x + \" Y: \" + y);\n    // console.log(\"word: \" + selection.toString())\n    // if(offsetStart === offsetEnd){\n    //   this.setState({thesauresViewer: {visibility: false, wordList:null}});\n    //   return;\n    // } // We dont have a full word selected\n    // // Extract word from selection\n    // let word = selection.toString();\n    // //TODO check for multple words and reject\n    // word.trim();\n  };\n\n  /**\n   * Bullet Type Change\n   * @param e\n   * @param newValue\n   */\n  bulletTypeChange = (e, newValue) => {\n    let bulletTypes = [\"EPR\", \"OPR\"];\n    this.setState({ tabValue: newValue, bulletType: bulletTypes[newValue] });\n  };\n\n  /**\n   * Toggle Drawer\n   * @param event\n   * @param v\n   */\n  toggleDrawer = (event, v) => {\n    if (\n      event.type === \"keydown\" &&\n      (event.key === \"Tab\" || event.key === \"Shift\")\n    ) {\n      return;\n    }\n    this.setState({ drawerOpen: v });\n  };\n\n  /**\n   * Render\n   * @returns {JSX.Element}\n   */\n  render() {\n    const widthSettings = {\n      OPR: \"201.050mm\",\n      EPR: \"202.321mm\",\n    };\n    const bgColor = {\n      OPR: \"#1a6f46\",\n      EPR: \"\",\n    };\n\n    const widthSetting = widthSettings[this.state.bulletType];\n    const currentBgColor = bgColor[this.state.bulletType];\n\n    return (\n      <div id=\"root\" className=\"root\">\n        <AppBar\n          position=\"static\"\n          className=\"app-bar\"\n          style={{ backgroundColor: currentBgColor }}\n        >\n          <Toolbar>\n            <Typography variant=\"h6\" color=\"inherit\" className=\"title\">\n              Bullet Buddy!\n            </Typography>\n            <Tabs\n              className=\"\"\n              value={this.state.tabValue}\n              onChange={this.bulletTypeChange}\n            >\n              <Tab label=\"EPR/AWD\" />\n              <Tab label=\"OPR\" />\n            </Tabs>\n            <Button\n              size=\"small\"\n              variant=\"outlined\"\n              color=\"inherit\"\n              startIcon={<ViewListIcon />}\n              onClick={(e) => this.toggleDrawer(e, true)}\n            >\n              Abbreviations\n            </Button>\n          </Toolbar>\n        </AppBar>\n\n        <Container className=\"content\" maxWidth=\"xl\">\n          <Grid container justifyContent=\"space-around\" spacing={1}>\n            <Grid item xs={12} md={12} lg={12} xl={6} align=\"center\">\n              <div className=\"container\">\n                <Typography variant=\"h6\">Input Bullets Here</Typography>\n                <textarea\n                  ref={this.inputTextRef}\n                  value={this.state.bulletInputText}\n                  rows={6}\n                  onChange={(e) => this.handleTextAreaUpdate(e.target.value)}\n                  className=\"bullet-input-text\"\n                  style={{\n                    width: widthSettings[this.state.bulletType],\n                    resize: \"none\",\n                    minHeight: \"5em\",\n                  }}\n                />\n                <div style={{marginTop: \"1em\"}}>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    size=\"small\"\n                    startIcon={<DeleteIcon />}\n                    onClick={() => {\n                      this.handleTextAreaUpdate(\"\");\n                      this.inputTextRef.current.style.height = \"5em\";\n                    }}\n                  >\n                    Clear Input\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"container\">\n                <Typography variant=\"h6\" component=\"h2\">\n                  Smart Bullet Editor\n                </Typography>\n\n                <small>Hover over terms to see synonyms</small>\n\n                <BulletEditor\n                  inputBullets={this.state.bulletInputText}\n                  updateInputText={this.handleTextAreaUpdate}\n                  abbreviationData={this.state.abbreviationTable}\n                  width={widthSetting}\n                />\n              </div>\n            </Grid>\n\n            <Grid item xs={12} md={12} lg={12} xl={6} align=\"center\">\n              <div className=\"container\">\n                <Typography variant=\"h6\" component=\"h2\">\n                  Bullet Output\n                </Typography>\n\n                <BulletOutputViewer\n                  bulletsText={this.state.bulletInputText}\n                  width={widthSetting}\n                  updateInputText={this.handleTextAreaUpdate}\n                />\n              </div>\n\n              <div className=\"container\">\n                <AcronymViewer\n                  width={widthSetting}\n                  text={this.state.bulletInputText}\n                />\n              </div>\n            </Grid>\n          </Grid>\n\n          <Drawer\n            className=\"drawer\"\n            anchor=\"bottom\"\n            open={this.state.drawerOpen}\n            onClose={(e) => this.toggleDrawer(e, false)}\n          >\n            <div id=\"drawer-header\" className=\"drawer-header\">\n              <Typography variant=\"h6\">Current Abbreviations Table</Typography>\n              <Typography variant=\"subtitle1\">\n                Copy your organizations approved abbreviations into the table.\n                (They will save in your browser for future use!)\n              </Typography>\n            </div>\n            <AbbreviationTable\n              abbreviationData={this.state.abbreviationData}\n              onAbbrevitionDataChange={this.onAbbreviationTableChange}\n            />\n          </Drawer>\n        </Container>\n\n        <div className=\"bottom-text\">\n          <p>\n            This site utilizes{\" \"}\n            <a href=\"https://material-ui.com/\"> Material-UI</a>,{\" \"}\n            <a href=\"https://handsontable.com/\">HandsOnTable</a>, and the{\" \"}\n            <a href=\"https://www.datamuse.com/api/\">DataMuse API</a> The\n            inspiration for this tool came from the{\" \"}\n            <a href=\"https://ea-pods-team.github.io/pdf-bullets/ \">\n              {\" \"}\n              EA-Pods Team pdf-bullets project\n            </a>\n          </p>\n          <p>\n            Submit an{\" \"}\n            <a href=\"https://github.com/AF-Tools/bullet-buddy/issues/new/choose\">\n              issue\n            </a>{\" \"}\n            or view our{\" \"}\n            <a href=\"https://github.com/AF-Tools/bullet-buddy/\">GitHub Page</a>\n          </p>\n          <p>Maintained by Nicholas Schweikart</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/css/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}